name: Performance Monitoring

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]
  schedule:
    # Run performance checks daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  performance-audit:
    name: Performance Budget Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start preview server
        run: |
          npm run preview &
          npx wait-on http://localhost:4173

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli lighthouse

      - name: Run performance checks
        run: node scripts/performance-check.js http://localhost:4173 --fail-on-violation
        env:
          CI: true

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lighthouse-report
          path: |
            lighthouse-report.json
            performance-report.json
            performance-summary.md

      - name: Comment PR with performance results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              const reportPath = 'performance-summary.md';
              if (fs.existsSync(reportPath)) {
                const report = fs.readFileSync(reportPath, 'utf8');

                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `## 🚀 Performance Report\n\n${report}`
                });
              }
            } catch (error) {
              console.error('Failed to comment on PR:', error);
            }

      - name: Send Slack notification on failure
        if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#performance-alerts'
          text: |
            🚨 Performance budget violation detected!

            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}

            Check the performance report for details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_PERFORMANCE_WEBHOOK }}

  lighthouse-ci:
    name: Lighthouse CI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build with analysis
        run: npm run build:analyze

      - name: Analyze bundle size
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read bundle analysis
            const statsPath = 'dist/stats.html';
            if (fs.existsSync(statsPath)) {
              console.log('Bundle analysis completed');

              // Get file sizes
              const distDir = 'dist';
              const files = fs.readdirSync(distDir, { recursive: true });

              let totalSize = 0;
              let jsSize = 0;
              let cssSize = 0;

              files.forEach(file => {
                const filePath = path.join(distDir, file);
                const stats = fs.statSync(filePath);

                if (stats.isFile()) {
                  totalSize += stats.size;

                  if (file.endsWith('.js')) {
                    jsSize += stats.size;
                  } else if (file.endsWith('.css')) {
                    cssSize += stats.size;
                  }
                }
              });

              console.log(`Total bundle size: ${(totalSize / 1024).toFixed(2)} KB`);
              console.log(`JavaScript: ${(jsSize / 1024).toFixed(2)} KB`);
              console.log(`CSS: ${(cssSize / 1024).toFixed(2)} KB`);

              // Check against budgets
              const budgetPath = '.performance-budget.json';
              if (fs.existsSync(budgetPath)) {
                const budget = JSON.parse(fs.readFileSync(budgetPath, 'utf8'));
                const jsBudget = budget.budgets.bundle_sizes.initial_js.target;
                const cssBudget = budget.budgets.bundle_sizes.initial_css.target;

                if (jsSize > jsBudget) {
                  core.setFailed(`JavaScript bundle size ${jsSize} exceeds budget of ${jsBudget} bytes`);
                }

                if (cssSize > cssBudget) {
                  core.setFailed(`CSS bundle size ${cssSize} exceeds budget of ${cssBudget} bytes`);
                }
              }
            }

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: |
            dist/stats.html
            dist/stats.json

  web-vitals-monitoring:
    name: Real User Monitoring
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to staging (for RUM)
        # This would deploy to a staging environment for real user monitoring
        run: echo "Deploy to staging environment for RUM collection"

      - name: Collect Web Vitals data
        run: |
          # This would integrate with your RUM service
          echo "Collecting Real User Monitoring data..."
          echo "Integration with services like SpeedCurve, Calibre, or custom analytics"

      - name: Generate performance dashboard
        run: |
          # Generate performance dashboard data
          echo "Updating performance dashboard..."

  performance-regression:
    name: Performance Regression Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies (base)
        run: npm ci

      - name: Build application (base)
        run: npm run build

      - name: Run performance test (base)
        run: |
          npm run preview &
          npx wait-on http://localhost:4173
          lighthouse http://localhost:4173 --output=json --output-path=base-lighthouse.json --preset=desktop --quiet
          pkill -f "preview"

      - name: Checkout PR branch
        uses: actions/checkout@v4

      - name: Install dependencies (PR)
        run: npm ci

      - name: Build application (PR)
        run: npm run build

      - name: Run performance test (PR)
        run: |
          npm run preview &
          npx wait-on http://localhost:4173
          lighthouse http://localhost:4173 --output=json --output-path=pr-lighthouse.json --preset=desktop --quiet

      - name: Compare performance
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const baseReport = JSON.parse(fs.readFileSync('base-lighthouse.json', 'utf8'));
              const prReport = JSON.parse(fs.readFileSync('pr-lighthouse.json', 'utf8'));

              const baseScore = baseReport.categories.performance.score * 100;
              const prScore = prReport.categories.performance.score * 100;
              const scoreDiff = prScore - baseScore;

              const baseLCP = baseReport.audits['largest-contentful-paint'].numericValue;
              const prLCP = prReport.audits['largest-contentful-paint'].numericValue;
              const lcpDiff = prLCP - baseLCP;

              const baseFCP = baseReport.audits['first-contentful-paint'].numericValue;
              const prFCP = prReport.audits['first-contentful-paint'].numericValue;
              const fcpDiff = prFCP - baseFCP;

              let comment = `## 📊 Performance Comparison\n\n`;
              comment += `| Metric | Base | PR | Difference |\n`;
              comment += `|--------|------|----|-----------|\n`;
              comment += `| Performance Score | ${baseScore.toFixed(1)} | ${prScore.toFixed(1)} | ${scoreDiff > 0 ? '+' : ''}${scoreDiff.toFixed(1)} |\n`;
              comment += `| LCP | ${baseLCP.toFixed(0)}ms | ${prLCP.toFixed(0)}ms | ${lcpDiff > 0 ? '+' : ''}${lcpDiff.toFixed(0)}ms |\n`;
              comment += `| FCP | ${baseFCP.toFixed(0)}ms | ${prFCP.toFixed(0)}ms | ${fcpDiff > 0 ? '+' : ''}${fcpDiff.toFixed(0)}ms |\n\n`;

              if (scoreDiff < -5) {
                comment += `⚠️ **Performance regression detected!** Score decreased by ${Math.abs(scoreDiff).toFixed(1)} points.\n`;
              } else if (scoreDiff > 5) {
                comment += `🎉 **Performance improvement!** Score increased by ${scoreDiff.toFixed(1)} points.\n`;
              } else {
                comment += `✅ **Performance maintained** - no significant changes.\n`;
              }

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });

              // Fail CI if significant regression
              if (scoreDiff < -10 || lcpDiff > 500) {
                core.setFailed('Significant performance regression detected');
              }

            } catch (error) {
              console.error('Failed to compare performance:', error);
            }