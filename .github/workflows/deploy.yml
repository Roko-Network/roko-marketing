name: Enhanced Production Deployment

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment (skip health checks)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Pre-deployment checks
  pre-deploy:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Version
        id: version
        run: |
          if [[ ${{ github.ref }} == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="$(date +'%Y%m%d')-${GITHUB_SHA::8}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Check Deployment Conditions
        id: check
        run: |
          SHOULD_DEPLOY="true"

          # Check if this is a force deployment
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "Force deployment requested"
            SHOULD_DEPLOY="true"
          else
            # Check for [skip deploy] in commit message
            if git log -1 --pretty=%B | grep -q "\[skip deploy\]"; then
              echo "Deployment skipped due to [skip deploy] in commit message"
              SHOULD_DEPLOY="false"
            fi

            # Check for breaking changes marker
            if git log -1 --pretty=%B | grep -q "BREAKING CHANGE"; then
              echo "Breaking change detected - requires manual approval"
              # In real scenario, this would trigger a manual approval workflow
            fi
          fi

          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT

  # Build and test
  build:
    name: Build Application
    needs: pre-deploy
    if: needs.pre-deploy.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [staging, production]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Run tests
        run: |
          npm run test:unit
          npm run lint
          npm run type-check

      - name: Build for ${{ matrix.environment }}
        run: npm run build:ci
        env:
          NODE_ENV: production
          VITE_BUILD_ENV: ${{ matrix.environment }}
          VITE_VERSION: ${{ needs.pre-deploy.outputs.version }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.environment }}
          path: dist/
          retention-days: 30

  # Docker build
  docker:
    name: Build Docker Image
    needs: [pre-deploy, build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.pre-deploy.outputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.pre-deploy.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}

  # Staging deployment
  deploy-staging:
    name: Deploy to Staging
    needs: [pre-deploy, build, docker]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.roko.network
    steps:
      - uses: actions/checkout@v4

      - name: Download staging build
        uses: actions/download-artifact@v4
        with:
          name: build-staging
          path: dist/

      - name: Deploy to Vercel (Staging)
        id: vercel-staging
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./dist
          vercel-args: '--env ENVIRONMENT=staging'

      - name: Deploy to Netlify (Staging)
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions - ${{ needs.pre-deploy.outputs.version }}"
          alias: staging-${{ github.run_number }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}

      - name: Update staging environment variables
        run: |
          echo "STAGING_URL=${{ steps.vercel-staging.outputs.preview-url }}" >> $GITHUB_ENV

  # Production deployment
  deploy-production:
    name: Deploy to Production
    needs: [pre-deploy, build, docker, deploy-staging]
    if: github.ref == 'refs/heads/main' && (github.event.inputs.environment == 'production' || github.event.inputs.environment == null)
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://roko.network
    steps:
      - uses: actions/checkout@v4

      - name: Download production build
        uses: actions/download-artifact@v4
        with:
          name: build-production
          path: dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Backup current deployment
        run: |
          # Create backup of current production
          aws s3 sync s3://${{ secrets.S3_BUCKET }} s3://${{ secrets.S3_BUCKET }}-backup-$(date +%Y%m%d-%H%M%S) --delete

          # Keep only last 5 backups
          aws s3 ls s3://${{ secrets.S3_BUCKET }}-backup- | sort -r | tail -n +6 | awk '{print $4}' | while read backup; do
            aws s3 rm s3://${backup} --recursive
          done

      - name: Deploy to AWS S3
        run: |
          # Upload with optimal cache headers
          aws s3 sync dist/ s3://${{ secrets.S3_BUCKET }} \
            --delete \
            --exclude "*.html" \
            --cache-control "public, max-age=31536000, immutable"

          # Upload HTML files with short cache
          aws s3 sync dist/ s3://${{ secrets.S3_BUCKET }} \
            --exclude "*" \
            --include "*.html" \
            --cache-control "public, max-age=0, must-revalidate"

      - name: Invalidate CloudFront cache
        run: |
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)

          echo "Invalidation ID: $INVALIDATION_ID"

          # Wait for invalidation to complete
          aws cloudfront wait invalidation-completed \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --id $INVALIDATION_ID

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: roko-marketing
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./dist

      - name: Update DNS records
        run: |
          # Update Cloudflare DNS for failover
          curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/dns_records/${{ secrets.CF_RECORD_ID }}" \
            -H "Authorization: Bearer ${{ secrets.CF_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{
              "type": "CNAME",
              "name": "@",
              "content": "${{ secrets.PRIMARY_CDN_DOMAIN }}",
              "ttl": 300
            }'

  # Post-deployment validation
  validate-deployment:
    name: Validate Deployment
    needs: [pre-deploy, deploy-production]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Health check
        id: health
        run: |
          URLS=("https://roko.network" "https://roko.network/technology" "https://roko.network/developers")

          for URL in "${URLS[@]}"; do
            echo "Checking $URL..."
            for i in {1..10}; do
              STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
              if [ $STATUS -eq 200 ]; then
                echo "✅ $URL is responding"
                break
              elif [ $i -eq 10 ]; then
                echo "❌ $URL failed after 10 attempts"
                exit 1
              else
                echo "Attempt $i failed with status $STATUS, retrying in 30s..."
                sleep 30
              fi
            done
          done

      - name: Performance validation
        run: |
          # Run Lighthouse on production
          npm install -g @lhci/cli
          lhci autorun --config=./lighthouserc.json --target=upload

      - name: Security headers check
        run: |
          SECURITY_HEADERS=(
            "Content-Security-Policy"
            "X-Frame-Options"
            "X-Content-Type-Options"
            "Strict-Transport-Security"
          )

          for HEADER in "${SECURITY_HEADERS[@]}"; do
            if curl -sI https://roko.network | grep -qi "$HEADER"; then
              echo "✅ $HEADER is present"
            else
              echo "❌ $HEADER is missing"
              exit 1
            fi
          done

      - name: Core Web Vitals check
        run: |
          node scripts/performance-check.js https://roko.network --threshold

  # Rollback capability
  rollback:
    name: Emergency Rollback
    if: failure() && needs.validate-deployment.result == 'failure'
    needs: [validate-deployment]
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Rollback to previous version
        run: |
          # Find latest backup
          LATEST_BACKUP=$(aws s3 ls s3://${{ secrets.S3_BUCKET }}-backup- | sort -r | head -1 | awk '{print $4}')

          if [ -n "$LATEST_BACKUP" ]; then
            echo "Rolling back to: $LATEST_BACKUP"
            aws s3 sync s3://$LATEST_BACKUP s3://${{ secrets.S3_BUCKET }} --delete

            # Invalidate cache
            aws cloudfront create-invalidation \
              --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
              --paths "/*"
          else
            echo "No backup found for rollback"
            exit 1
          fi

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "🚨 Emergency Rollback Executed",
              "attachments": [{
                "color": "danger",
                "fields": [
                  {"title": "Reason", "value": "Deployment validation failed", "short": true},
                  {"title": "Action", "value": "Automatic rollback completed", "short": true},
                  {"title": "Version", "value": "${{ needs.pre-deploy.outputs.version }}", "short": true}
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Success notification
  notify-success:
    name: Deployment Success Notification
    needs: [pre-deploy, validate-deployment]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Notify success
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "🚀 ROKO Marketing Site Deployed Successfully",
              "attachments": [{
                "color": "good",
                "fields": [
                  {"title": "Version", "value": "${{ needs.pre-deploy.outputs.version }}", "short": true},
                  {"title": "Environment", "value": "Production", "short": true},
                  {"title": "URL", "value": "https://roko.network", "short": false},
                  {"title": "Commit", "value": "${{ github.sha }}", "short": true},
                  {"title": "Author", "value": "${{ github.actor }}", "short": true}
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}