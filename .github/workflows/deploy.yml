name: CD - Deploy to Production

on:
  push:
    branches: [master, main]
  workflow_dispatch:
    inputs:
      deploy_mode:
        description: 'Deployment mode'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard
          - force
          - rollback

env:
  NODE_VERSION: '20.x'

concurrency:
  group: production-deploy
  cancel-in-progress: false

jobs:
  deploy:
    name: Deploy to Contabo VPS
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://roko.network

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate deployment ID
        id: deployment
        run: |
          DEPLOY_ID="$(date +'%Y%m%d-%H%M%S')-${GITHUB_SHA::8}"
          echo "deploy_id=$DEPLOY_ID" >> $GITHUB_OUTPUT
          echo "Deployment ID: $DEPLOY_ID"

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script_stop: true
          script: |
            set -e

            # Configuration
            APP_DIR="/var/www/roko-marketing"
            REPO_URL="https://github.com/Roko-Network/roko-marketing.git"
            DEPLOY_ID="${{ steps.deployment.outputs.deploy_id }}"
            DEPLOY_MODE="${{ github.event.inputs.deploy_mode || 'standard' }}"

            # Ensure app directory exists
            sudo mkdir -p $APP_DIR
            sudo chown -R $USER:$USER $APP_DIR
            cd $APP_DIR

            # Clone or update repository
            if [ ! -d ".git" ]; then
              echo "Cloning repository..."
              git clone $REPO_URL .
            else
              echo "Updating repository..."
              git fetch origin
              git reset --hard origin/${{ github.ref_name }}
            fi

            # Checkout specific commit
            git checkout ${{ github.sha }}

            # Install dependencies and build
            echo "Installing dependencies..."
            npm ci --prefer-offline

            echo "Building application..."
            NODE_OPTIONS="--max-old-space-size=4096" npm run build

            # Backup current deployment
            if [ -d "dist" ]; then
              echo "Backing up current deployment..."
              sudo mkdir -p /var/backups/roko-marketing
              sudo tar -czf /var/backups/roko-marketing/backup-$DEPLOY_ID.tar.gz dist/

              # Keep only last 3 backups
              ls -t /var/backups/roko-marketing/backup-*.tar.gz | tail -n +4 | xargs -r sudo rm
            fi

            # Deploy new build
            echo "Deploying new build..."
            if [ -d "dist" ]; then
              # Update nginx root if needed
              sudo nginx -t && sudo systemctl reload nginx
              echo "Deployment successful: $DEPLOY_ID"
            else
              echo "Build failed - no dist directory found"
              exit 1
            fi

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            # Health check
            echo "Running health check..."
            response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost || echo "000")

            if [ "$response" = "200" ]; then
              echo "✅ Health check passed"
            else
              echo "❌ Health check failed with status: $response"

              # Rollback if health check fails
              if [ "${{ github.event.inputs.deploy_mode }}" != "force" ]; then
                echo "Initiating automatic rollback..."
                cd /var/www/roko-marketing

                # Find previous backup
                PREV_BACKUP=$(ls -t /var/backups/roko-marketing/backup-*.tar.gz | head -n 2 | tail -n 1)
                if [ -n "$PREV_BACKUP" ]; then
                  echo "Rolling back to: $PREV_BACKUP"
                  sudo tar -xzf $PREV_BACKUP -C /var/www/roko-marketing/
                  sudo nginx -t && sudo systemctl reload nginx
                  echo "Rollback completed"
                fi
                exit 1
              fi
            fi

      - name: Clear CDN cache
        if: success()
        continue-on-error: true
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            # Clear any local caches
            echo "Clearing local caches..."

            # If using Cloudflare
            if [ -n "${{ secrets.CF_ZONE_ID }}" ]; then
              curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/purge_cache" \
                -H "Authorization: Bearer ${{ secrets.CF_API_TOKEN }}" \
                -H "Content-Type: application/json" \
                --data '{"purge_everything":true}' || true
            fi

  rollback:
    name: Manual Rollback
    if: github.event.inputs.deploy_mode == 'rollback'
    runs-on: ubuntu-latest
    environment:
      name: production

    steps:
      - name: Perform rollback
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -e

            echo "Performing manual rollback..."
            cd /var/www/roko-marketing

            # Find and restore previous backup
            PREV_BACKUP=$(ls -t /var/backups/roko-marketing/backup-*.tar.gz | head -n 2 | tail -n 1)

            if [ -z "$PREV_BACKUP" ]; then
              echo "No backup available for rollback"
              exit 1
            fi

            echo "Rolling back to: $PREV_BACKUP"
            sudo tar -xzf $PREV_BACKUP -C /var/www/roko-marketing/
            sudo nginx -t && sudo systemctl reload nginx

            echo "Rollback completed successfully"